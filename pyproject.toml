[build-system]
requires = ["setuptools>=68.0", "wheel>=0.40.0", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "brouser-agent"
dynamic = ["version"]
authors = [
    {name = "Browser Agent Team", email = "contact@brouser-agent.com"},
]
maintainers = [
    {name = "Browser Agent Team", email = "contact@brouser-agent.com"},
]
description = "AI-powered web browser automation with multi-LLM support and modern GUI"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Environment :: X11 Applications :: Qt",
    "Framework :: Pytest",
    "Typing :: Typed",
]
keywords = [
    "automation", "browser", "ai", "selenium", "playwright", "gui", "llm",
    "web-scraping", "testing", "rpa", "natural-language", "openai",
    "anthropic", "cli", "cross-platform", "mcp"
]
license = {text = "MIT"}
dependencies = [
    "selenium>=4.15.0",
    "webdriver-manager>=4.0.0",
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.0",
    "requests>=2.31.0",
    "openai>=1.3.0",
    "python-dotenv>=1.0.0",
    "schedule>=1.2.0",
    "psutil>=5.9.0",
    "colorama>=0.4.0",
    "pydantic>=2.5.0",
    "typing-extensions>=4.8.0",
    "pillow>=10.0.0",
    "customtkinter>=5.2.0",
    "google-generativeai>=0.3.0",
    "anthropic>=0.7.0",
    "aiofiles>=23.0.0",
    "pyautogui>=0.9.54",
    "opencv-python>=4.8.0",
    "mcp>=1.0.0",
    "jsonrpc-requests>=0.4.0",
    "websockets>=12.0",
    "aiohttp>=3.9.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "PyYAML>=6.0.1",
    "loguru>=0.7.2",
    "tenacity>=8.2.3",
    "jinja2>=3.1.2",
    "packaging>=23.2",
    "platformdirs>=4.1.0",
    "cryptography>=41.0.7",
    "httpx>=0.25.2",
    "asyncio-mqtt>=0.16.1",
    "python-multipart>=0.0.6",
    "uvloop>=0.19.0; sys_platform != 'win32'",
    "winloop>=0.1.0; sys_platform == 'win32'",
]

[project.optional-dependencies]
# AI providers
ai = [
    "openai>=1.6.0",
    "anthropic>=0.8.0",
    "google-generativeai>=0.3.0",
    "cohere>=4.37",
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "sentence-transformers>=2.2.2",
]

# GUI dependencies
gui = [
    "PyQt6>=6.6.0",
    "PySide6>=6.6.0",
    "tkinter-tooltip>=2.1.0",
    "customtkinter>=5.2.0",
    "ttkbootstrap>=1.10.1",
]

# Web server and API
web = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "starlette>=0.27.0",
    "websockets>=12.0",
    "sse-starlette>=1.8.2",
]

# Database support
db = [
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.19.0",
    "redis>=5.0.1",
    "motor>=3.3.2",
]

# Cloud and enterprise features
cloud = [
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
    "kubernetes>=28.1.0",
    "docker>=6.1.3",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation>=0.42b0",
    "sentry-sdk>=1.38.0",
    "structlog>=23.2.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.1",
    "pytest-benchmark>=4.0.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pylint>=3.0.3",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
    "tox>=4.11.4",
    "coverage>=7.3.2",
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "build>=1.0.3",
    "twine>=4.0.2",
    "wheel>=0.42.0",
    "setuptools-scm>=8.0.4",
    "pip-tools>=7.3.0",
    "bump2version>=1.0.1",
    "gitpython>=3.1.40",
    "watchdog>=3.0.0",
    "ipython>=8.17.2",
    "ipdb>=0.13.13",
    "jupyter>=1.0.0",
    "notebook>=7.0.6",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
    "py-spy>=0.3.14",
]

# Testing dependencies
test = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.1",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.2.0",
    "pytest-repeat>=0.9.3",
    "pytest-randomly>=3.15.0",
    "pytest-sugar>=0.9.7",
    "pytest-clarity>=1.0.1",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "responses>=0.24.1",
    "httpx>=0.25.2",
    "aioresponses>=0.7.4",
    "freezegun>=1.2.2",
    "time-machine>=2.13.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.2",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.5.0",
    "sphinxcontrib-mermaid>=0.9.2",
    "sphinx-tabs>=3.4.4",
    "sphinx-togglebutton>=0.3.2",
    "nbsphinx>=0.9.3",
    "pandoc>=2.3",
    "docutils>=0.20.1",
]

# All optional dependencies
all = [
    "brouser-agent[ai,gui,web,db,cloud,monitoring]",
]

# Full development environment
full = [
    "brouser-agent[all,dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/AryanVBW/brouser-agent"
Documentation = "https://brouser-agent.readthedocs.io"
Repository = "https://github.com/AryanVBW/brouser-agent.git"
"Bug Tracker" = "https://github.com/AryanVBW/brouser-agent/issues"
Changelog = "https://github.com/AryanVBW/brouser-agent/blob/main/CHANGELOG.md"

[project.scripts]
brouser-agent = "brouser_agent.cli_main:main"
brouser-agent-gui = "brouser_agent.gui_main:main"
ba = "brouser_agent.cli_main:main"
browser-agent = "brouser_agent.cli_main:main"

[project.gui-scripts]
brouser-agent-gui = "brouser_agent.gui_main:main"

[project.entry-points."brouser_agent.plugins"]
default = "brouser_agent.plugins.default:DefaultPlugin"
web_scraper = "brouser_agent.plugins.web_scraper:WebScraperPlugin"
form_filler = "brouser_agent.plugins.form_filler:FormFillerPlugin"
screenshot = "brouser_agent.plugins.screenshot:ScreenshotPlugin"
performance = "brouser_agent.plugins.performance:PerformancePlugin"
accessibility = "brouser_agent.plugins.accessibility:AccessibilityPlugin"

[project.entry-points."brouser_agent.browsers"]
playwright = "brouser_agent.browsers.playwright_browser:PlaywrightBrowser"
selenium = "brouser_agent.browsers.selenium_browser:SeleniumBrowser"

[project.entry-points."brouser_agent.ai_providers"]
openai = "brouser_agent.ai.openai_provider:OpenAIProvider"
anthropic = "brouser_agent.ai.anthropic_provider:AnthropicProvider"
local = "brouser_agent.ai.local_provider:LocalProvider"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."] 
include = ["brouser_agent*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
brouser_agent = [
    "py.typed",
    "*.json",
    "*.yaml",
    "*.yml",
    "*.toml",
    "*.txt",
    "*.md",
    "assets/**/*",
    "config/**/*",
    "gui/assets/**/*",
    "gui/themes/**/*",
    "plugins/templates/**/*",
    "templates/*.html",
    "templates/*.css",
    "templates/*.js",
    "static/*",
    "schemas/*.json",
    "locale/*/LC_MESSAGES/*.po",
    "locale/*/LC_MESSAGES/*.mo",
]

[tool.setuptools_scm]
write_to = "brouser_agent/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"
fallback_version = "1.0.0"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["brouser_agent", "tests", "examples"]
skip_glob = ["**/migrations/*"]
known_first_party = ["brouser_agent"]
known_third_party = [
    "playwright", "selenium", "requests", "aiohttp", "pydantic",
    "click", "rich", "typer", "yaml", "dotenv", "loguru",
    "tenacity", "jinja2", "PIL", "psutil", "packaging",
    "platformdirs", "cryptography", "httpx", "websockets",
    "pytest", "mock", "faker", "factory_boy"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=brouser_agent",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--durations=10",
    "--tb=short",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "gui: GUI tests",
    "cli: CLI tests",
    "browser: Browser-specific tests",
    "ai: AI provider tests",
    "slow: Slow tests",
    "fast: Fast tests",
    "network: Tests requiring network access",
    "security: Security tests",
    "performance: Performance tests",
    "benchmark: Benchmark tests",
    "stress: Stress tests",
    "stability: Stability tests",
    "regression: Regression tests",
    "smoke: Smoke tests",
    "acceptance: Acceptance tests",
    "compatibility: Compatibility tests",
    "platform: Platform-specific tests",
    "windows: Windows-specific tests",
    "linux: Linux-specific tests",
    "macos: macOS-specific tests",
    "docker: Docker tests",
    "kubernetes: Kubernetes tests",
    "cloud: Cloud tests",
    "database: Database tests",
    "redis: Redis tests",
    "postgresql: PostgreSQL tests",
    "mongodb: MongoDB tests",
    "api: API tests",
    "web: Web tests",
    "websocket: WebSocket tests",
    "auth: Authentication tests",
    "config: Configuration tests",
    "logging: Logging tests",
    "monitoring: Monitoring tests",
    "plugin: Plugin tests",
    "extension: Extension tests",
    "mock: Mock tests",
    "fixture: Fixture tests",
    "parametrize: Parametrized tests",
    "timeout: Tests with timeout",
    "memory: Memory tests",
    "cpu: CPU tests",
    "io: I/O tests",
    "async: Async tests",
    "sync: Sync tests",
    "concurrent: Concurrent tests",
    "parallel: Parallel tests",
    "serial: Serial tests",
    "isolated: Isolated tests",
    "cleanup: Cleanup tests",
    "setup: Setup tests",
    "teardown: Teardown tests",
    "dev: Development tests",
    "prod: Production tests",
    "staging: Staging tests",
    "local: Local tests",
    "remote: Remote tests",
    "offline: Offline tests",
    "online: Online tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::ResourceWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_auto_indent = true
junit_family = "xunit2"
junit_suite_name = "brouser-agent"
junit_logging = "all"
junit_log_passing_tests = true
junit_duration_report = "total"
asyncio_mode = "auto"
timeout = 300
timeout_method = "thread"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "playwright.*",
    "customtkinter.*",
    "webdriver_manager.*",
    "pyautogui.*",
    "cv2.*",
    "PIL.*",
    "psutil.*",
    "uvloop.*",
    "winloop.*",
    "PyQt6.*",
    "PySide6.*",
    "ttkbootstrap.*",
    "openai.*",
    "anthropic.*",
    "google.generativeai.*",
    "cohere.*",
    "transformers.*",
    "torch.*",
    "sentence_transformers.*",
    "fastapi.*",
    "uvicorn.*",
    "starlette.*",
    "sse_starlette.*",
    "sqlalchemy.*",
    "alembic.*",
    "asyncpg.*",
    "aiosqlite.*",
    "redis.*",
    "motor.*",
    "boto3.*",
    "azure.*",
    "google.cloud.*",
    "kubernetes.*",
    "docker.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "sentry_sdk.*",
    "structlog.*",
]
ignore_missing_imports = true

# Pylint configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "invalid-name",
    "line-too-long",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
    "import-error",
    "no-name-in-module",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-parents = 10
max-attributes = 15
min-public-methods = 1
max-public-methods = 25
max-bool-expr = 5

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601"]

# Coverage configuration
[tool.coverage.run]
source = ["brouser_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.tox/*",
    "*/setup.py",
    "*/conftest.py",
    "brouser_agent/_version.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
    "@overload",
    "class .*\\(Protocol\\):",
    "except ImportError:",
    "except ModuleNotFoundError:",
]
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Ruff linting (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "TRY003", # avoid specifying long messages outside the exception class
]
line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "ARG001", "ARG002"]
"examples/*" = ["T201", "S101"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["brouser_agent"]

# Bump2version configuration
[tool.bumpversion]
current_version = "1.0.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
commit = true
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
message = "Bump version: {current_version} → {new_version}"
commit_args = "--no-verify"

[[tool.bumpversion.files]]
filename = "brouser_agent/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "setup.py"
search = 'version="{current_version}"'
replace = 'version="{new_version}"'

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "## [Unreleased]"
replace = "## [Unreleased]\n\n## [{new_version}] - {now:%Y-%m-%d}"