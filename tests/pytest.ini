[tool:pytest]
# Pytest configuration for Browser Agent

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum version
minversion = 7.0

# Add current directory to Python path
addopts = 
    # Output options
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    
    # Coverage options
    --cov=brouser_agent
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --cov-branch
    
    # Performance options
    --durations=10
    --maxfail=5
    
    # Parallel execution
    -n auto
    
    # Async support
    --asyncio-mode=auto
    
    # Doctest support
    --doctest-modules
    --doctest-glob="*.md"
    
    # Plugin options
    --html=reports/pytest_report.html
    --self-contained-html
    
    # Benchmark options
    --benchmark-skip

# Markers for test categorization
markers =
    # Test categories
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    functional: Functional tests
    
    # Performance tests
    slow: Slow running tests
    fast: Fast running tests
    benchmark: Benchmark tests
    performance: Performance tests
    
    # Feature tests
    gui: GUI related tests
    cli: CLI related tests
    browser: Browser automation tests
    ai: AI/LLM related tests
    config: Configuration tests
    mcp: MCP (Model Context Protocol) tests
    plugin: Plugin system tests
    
    # Platform tests
    windows: Windows specific tests
    macos: macOS specific tests
    linux: Linux specific tests
    
    # Browser tests
    chrome: Chrome browser tests
    firefox: Firefox browser tests
    safari: Safari browser tests
    edge: Edge browser tests
    
    # Network tests
    network: Tests requiring network access
    offline: Tests that work offline
    
    # Security tests
    security: Security related tests
    auth: Authentication tests
    
    # External dependencies
    requires_api_key: Tests requiring API keys
    requires_browser: Tests requiring browser installation
    requires_display: Tests requiring display/GUI
    
    # Test stability
    flaky: Flaky tests that may fail intermittently
    stable: Stable tests
    
    # Development
    wip: Work in progress tests
    skip: Tests to skip
    xfail: Expected to fail tests
    
    # Cleanup
    cleanup: Tests that perform cleanup
    no_cleanup: Tests that don't clean up after themselves

# Test timeout (in seconds)
timeout = 300

# Async timeout
asyncio_timeout = 60

# Warnings configuration
filterwarnings =
    # Ignore specific warnings
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    
    # Treat specific warnings as errors
    error::FutureWarning
    
    # Ignore warnings from third-party libraries
    ignore::DeprecationWarning:selenium.*
    ignore::DeprecationWarning:playwright.*
    ignore::UserWarning:customtkinter.*
    ignore::DeprecationWarning:openai.*
    ignore::UserWarning:anthropic.*
    
    # Ignore async warnings
    ignore::RuntimeWarning:asyncio.*
    
    # Ignore GUI warnings
    ignore::UserWarning:tkinter.*
    
    # Ignore network warnings
    ignore::urllib3.exceptions.InsecureRequestWarning

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Auto-use fixtures
usefixtures = 
    # Common fixtures
    temp_dir
    clean_environment
    
    # Logging fixtures
    caplog
    
    # Mock fixtures
    mock_config
    mock_browser

# Test collection
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".git",
    ".tox",
    ".pytest_cache",
    "__pycache__",
    ".mypy_cache",
    "node_modules",
    "venv",
    "env",
    ".venv",
    ".env",
    "htmlcov",
    "coverage",
    "logs",
    "temp",
    "cache",
    "screenshots",
    "exports",
    "browser_profiles",
    "examples",
    "docs"
]

# Doctest options
doctest_optionflags = 
    NORMALIZE_WHITESPACE
    IGNORE_EXCEPTION_DETAIL
    ALLOW_UNICODE
    ALLOW_BYTES

# Coverage configuration
[coverage:run]
source = brouser_agent
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */.*
    */venv/*
    */env/*
    setup.py
    */migrations/*
    */locale/*
    */static/*
    */media/*
    */node_modules/*
    */build/*
    */dist/*
    */.eggs/*
    */*.egg-info/*
    */examples/*
    */docs/*
    */scripts/*
    */tools/*
    */utils/debug.py
    */gui/debug_*
    */core/debug_*
    */temp/*
    */cache/*
    */logs/*
    */screenshots/*
    */exports/*
    */browser_profiles/*

branch = True
parallel = True
concurrency = multiprocessing,thread

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    
    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    
    # Don't complain about abstract methods
    @(abc\.)?abstractmethod
    
    # Don't complain about platform specific code
    if sys.platform
    if platform.system
    
    # Don't complain about debug code
    if DEBUG
    if debug
    
    # Don't complain about GUI code that requires display
    if not DISPLAY
    if HEADLESS
    
    # Don't complain about optional dependencies
    except ImportError
    except ModuleNotFoundError
    
    # Don't complain about version checks
    if sys.version_info
    
    # Don't complain about logging setup
    logger\.
    logging\.
    
    # Don't complain about cleanup code
    finally:
    except Exception:
    except BaseException:
    
    # Don't complain about type checking
    if typing.TYPE_CHECKING
    
    # Don't complain about deprecated code
    warnings.warn
    
    # Don't complain about development/testing code
    if __debug__
    assert
    
ignore_errors = True
show_missing = True
skip_covered = False
skip_empty = True
sort = Cover
precision = 2

[coverage:html]
directory = htmlcov
title = Browser Agent Coverage Report

[coverage:xml]
output = coverage.xml

# Benchmark configuration
[tool:pytest-benchmark]
# Only run benchmarks when explicitly requested
only_run_when_called = true

# Benchmark output
histogram = true
save = .benchmarks
save-data = true
autosave = true

# Performance thresholds
min-rounds = 5
max-time = 1.0
min-time = 0.000005
timer = time.perf_counter
disable-gc = true
warmup = true
warmup-iterations = 100000

# Benchmark comparison
compare = mean
compare-fail = mean:5%
sort = mean

# HTML benchmark report
histogram = true
name = short
fullname = true

# JSON benchmark report
json = .benchmarks/benchmark.json
json-indent = 2

# CSV benchmark report
csv = .benchmarks/benchmark.csv

# Performance regression detection
performance-regression = 10%
performance-regression-fail = 20%