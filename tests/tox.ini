# Tox configuration for Browser Agent
# Comprehensive testing across multiple Python versions and environments

[tox]
minversion = 4.0
envlist = 
    py{38,39,310,311,312}
    py{38,39,310,311,312}-{chrome,firefox,webkit}
    lint
    type
    security
    docs
    coverage
    benchmark
    integration
    e2e
skip_missing_interpreters = true
isolated_build = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
# Base test environment configuration
deps = 
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    pytest-asyncio>=0.21.0
    pytest-xdist>=3.0.0
    pytest-html>=3.1.0
    pytest-benchmark>=4.0.0
    playwright>=1.40.0
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt

setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PY_COLORS = 1
    PYTEST_ADDOPTS = --color=yes
    # Browser-specific environment variables
    chrome: BROWSER = chromium
    firefox: BROWSER = firefox
    webkit: BROWSER = webkit

commands_pre =
    python -m pip install --upgrade pip
    python -m playwright install {env:BROWSER:chromium firefox webkit}
    python -m playwright install-deps

commands = 
    pytest {posargs:tests/} \
        --cov=brouser_agent \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage.{envname}.xml \
        --cov-report=html:{toxworkdir}/htmlcov.{envname} \
        --junit-xml={toxworkdir}/junit.{envname}.xml \
        -v \
        -m "not (e2e or slow or benchmark)"

allowlist_externals = 
    make
    rm
    mkdir
    cp

[testenv:lint]
# Code quality and linting
deps =
    black>=23.0.0
    isort>=5.12.0
    flake8>=6.0.0
    flake8-docstrings>=1.7.0
    flake8-import-order>=0.18.2
    flake8-bugbear>=23.0.0
    flake8-comprehensions>=3.10.0
    flake8-simplify>=0.19.0
    pylint>=2.17.0
    pydocstyle>=6.3.0

commands =
    black --check --diff brouser_agent/ tests/ examples/
    isort --check-only --diff brouser_agent/ tests/ examples/
    flake8 brouser_agent/ tests/ examples/
    pylint brouser_agent/ --exit-zero
    pydocstyle brouser_agent/

[testenv:format]
# Auto-format code
deps = {[testenv:lint]deps}
commands =
    black brouser_agent/ tests/ examples/
    isort brouser_agent/ tests/ examples/

[testenv:type]
# Type checking
deps =
    mypy>=1.5.0
    types-requests>=2.31.0
    types-PyYAML>=6.0.0
    types-setuptools>=68.0.0
    -r{toxinidir}/requirements.txt

commands =
    mypy brouser_agent/ --config-file=pyproject.toml

[testenv:security]
# Security scanning
deps =
    bandit[toml]>=1.7.5
    safety>=2.3.0
    pip-audit>=2.6.0

commands =
    bandit -r brouser_agent/ -f json -o {toxworkdir}/bandit-report.json
    bandit -r brouser_agent/ -f txt
    safety check --json --output {toxworkdir}/safety-report.json
    safety check
    pip-audit --format=json --output={toxworkdir}/pip-audit-report.json
    pip-audit

[testenv:docs]
# Documentation building
deps =
    sphinx>=7.0.0
    sphinx-rtd-theme>=1.3.0
    sphinx-autodoc-typehints>=1.24.0
    myst-parser>=2.0.0
    -r{toxinidir}/requirements.txt

commands =
    sphinx-build -W -b html docs/ {toxworkdir}/docs/_build/html
    sphinx-build -W -b linkcheck docs/ {toxworkdir}/docs/_build/linkcheck

[testenv:coverage]
# Coverage reporting and analysis
deps = 
    {[testenv]deps}
    coverage[toml]>=7.0.0
    coverage-badge>=1.1.0

commands =
    coverage erase
    pytest tests/ \
        --cov=brouser_agent \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage.xml \
        --cov-report=html:{toxworkdir}/htmlcov \
        --cov-fail-under=80 \
        -m "not (e2e or slow or benchmark)"
    coverage report --show-missing
    coverage html -d {toxworkdir}/htmlcov
    coverage xml -o {toxworkdir}/coverage.xml
    coverage-badge -o {toxworkdir}/coverage.svg

[testenv:benchmark]
# Performance benchmarking
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0

commands =
    pytest tests/ \
        --benchmark-only \
        --benchmark-json={toxworkdir}/benchmark.json \
        --benchmark-histogram={toxworkdir}/benchmark \
        -v \
        -m "benchmark or performance"

[testenv:integration]
# Integration tests
deps = {[testenv]deps}
setenv = 
    {[testenv]setenv}
    INTEGRATION_TESTS = 1

commands =
    pytest tests/ \
        --cov=brouser_agent \
        --cov-report=xml:{toxworkdir}/coverage.integration.xml \
        --junit-xml={toxworkdir}/junit.integration.xml \
        -v \
        -m "integration and not slow" \
        --maxfail=5

[testenv:e2e]
# End-to-end tests
deps = {[testenv]deps}
setenv = 
    {[testenv]setenv}
    E2E_TESTS = 1
    HEADLESS = true

commands =
    pytest tests/ \
        --cov=brouser_agent \
        --cov-report=xml:{toxworkdir}/coverage.e2e.xml \
        --junit-xml={toxworkdir}/junit.e2e.xml \
        -v \
        -m "e2e" \
        --maxfail=3 \
        --tb=short

[testenv:stress]
# Stress testing
deps = 
    {[testenv]deps}
    pytest-stress>=1.0.0
    pytest-repeat>=0.9.0

commands =
    pytest tests/ \
        --count=100 \
        --stress \
        -v \
        -m "stress or stability" \
        --tb=no

[testenv:py{38,39,310,311,312}-chrome]
# Chrome-specific tests
setenv = 
    {[testenv]setenv}
    BROWSER = chromium
    BROWSER_CHANNEL = chrome

commands =
    pytest tests/ \
        --cov=brouser_agent \
        --cov-report=xml:{toxworkdir}/coverage.{envname}.xml \
        --junit-xml={toxworkdir}/junit.{envname}.xml \
        -v \
        -m "browser and not (e2e or slow)" \
        --browser=chromium

[testenv:py{38,39,310,311,312}-firefox]
# Firefox-specific tests
setenv = 
    {[testenv]setenv}
    BROWSER = firefox

commands =
    pytest tests/ \
        --cov=brouser_agent \
        --cov-report=xml:{toxworkdir}/coverage.{envname}.xml \
        --junit-xml={toxworkdir}/junit.{envname}.xml \
        -v \
        -m "browser and not (e2e or slow)" \
        --browser=firefox

[testenv:py{38,39,310,311,312}-webkit]
# WebKit-specific tests
setenv = 
    {[testenv]setenv}
    BROWSER = webkit

commands =
    pytest tests/ \
        --cov=brouser_agent \
        --cov-report=xml:{toxworkdir}/coverage.{envname}.xml \
        --junit-xml={toxworkdir}/junit.{envname}.xml \
        -v \
        -m "browser and not (e2e or slow)" \
        --browser=webkit

[testenv:clean]
# Clean up test artifacts
deps = coverage[toml]
skip_install = true
commands = 
    coverage erase
    rm -rf {toxworkdir}
    rm -rf .pytest_cache
    rm -rf htmlcov
    rm -rf .coverage*
    rm -rf junit*.xml
    rm -rf test-results.xml

[testenv:build]
# Build package
deps =
    build>=0.10.0
    twine>=4.0.0
    check-manifest>=0.49

commands =
    check-manifest
    python -m build
    twine check dist/*

[testenv:dev]
# Development environment
deps = 
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:security]deps}
    ipython>=8.0.0
    ipdb>=0.13.0
    jupyter>=1.0.0

commands = python -c "print('Development environment ready!')"

[testenv:quick]
# Quick test run for development
deps = {[testenv]deps}
commands =
    pytest tests/ \
        -x \
        -v \
        -m "not (e2e or slow or benchmark or integration)" \
        --tb=short

[testenv:parallel]
# Parallel test execution
deps = 
    {[testenv]deps}
    pytest-xdist>=3.0.0

commands =
    pytest tests/ \
        --cov=brouser_agent \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage.parallel.xml \
        -n auto \
        -v \
        -m "not (e2e or slow or benchmark)"

[testenv:memory]
# Memory profiling
deps = 
    {[testenv]deps}
    memory-profiler>=0.61.0
    pympler>=0.9

commands =
    python -m memory_profiler tests/test_memory_usage.py
    pytest tests/ \
        --profile \
        -v \
        -m "memory or performance"

# Flake8 configuration
[flake8]
max-line-length = 88
max-complexity = 10
select = E,W,F,B,C,N
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    B008,  # do not perform function calls in argument defaults
    C901,  # too complex (handled by pylint)
extend-ignore = E203, E266, E501, W503
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv,
    docs,
    migrations
per-file-ignores =
    __init__.py:F401
    tests/*:S101,D103
    examples/*:D103

# Coverage configuration
[coverage:run]
source = brouser_agent
omit = 
    */tests/*
    */test_*
    */__init__.py
    */migrations/*
    */venv/*
    */.tox/*
    */setup.py
    */conftest.py
branch = true
parallel = true

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract
    @overload
    class .*\(Protocol\):
    except ImportError:
    except ModuleNotFoundError:
show_missing = true
skip_covered = false
skip_empty = false
sort = Cover
precision = 2

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml